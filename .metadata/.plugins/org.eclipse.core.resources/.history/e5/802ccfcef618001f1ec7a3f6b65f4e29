package org.jsp.reservationapi.service;

import java.util.Optional;

import org.jsp.reservationapi.dao.userDao;
import org.jsp.reservationapi.dao.UserDao;
import org.jsp.reservationapi.dto.ResponseStructure;
import org.jsp.reservationapi.exception.AdminNotFoundException;
import org.jsp.reservationapi.model.Admin;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

@Service
public class UserService {
	
	@Autowired
	private UserDao userDao;
	
	public ResponseEntity<ResponseStructure<Admin>> saveAdmin(Admin admin) {

		ResponseStructure<Admin> structure = new ResponseStructure<>();

		structure.setMessage("Admin saved");
		structure.setData(userDao.saveAdmin(admin));
		structure.setStatusCode(HttpStatus.CREATED.value());

		return ResponseEntity.status(HttpStatus.CREATED).body(structure);
	}

	public ResponseEntity<ResponseStructure<Admin>> updateAdmin(Admin admin) {

		ResponseStructure<Admin> structure = new ResponseStructure<>();

		Optional<Admin> recAdmin = userDao.findAdminById(admin.getId());

		if (recAdmin.isPresent()) {

			Admin dbAdmin = recAdmin.get();

			dbAdmin.setName(admin.getName());
			dbAdmin.setEmail(admin.getEmail());
			dbAdmin.setPhone(admin.getPhone());
			dbAdmin.setGst_number(admin.getGst_number());
			dbAdmin.setTravels_name(admin.getTravels_name());
			dbAdmin.setPassword(admin.getPassword());

			structure.setMessage("Admin updated");
			structure.setData(userDao.saveAdmin(dbAdmin));
			structure.setStatusCode(HttpStatus.ACCEPTED.value());

			return ResponseEntity.status(HttpStatus.ACCEPTED).body(structure);
		}

		throw new AdminNotFoundException("Cannot update Admin as Id is invalid");
	}
	
	public ResponseEntity<ResponseStructure<Admin>> findAdminById(int id) {
		
		ResponseStructure<Admin> structure = new ResponseStructure<>();

		Optional<Admin> recAdmin = userDao.findAdminById(id);
		
		if( recAdmin.isPresent()) {
			
			structure.setData(recAdmin.get());
			structure.setMessage("Admin Found");
			structure.setStatusCode(HttpStatus.OK.value());
			
			return ResponseEntity.status(HttpStatus.OK).body(structure);
		}
		throw new AdminNotFoundException("Invalid Admin Id");
	}

	public ResponseEntity<ResponseStructure<Admin>> verifyAdminByPhoneAndPassword(long phone, String password) {

		ResponseStructure<Admin> structure = new ResponseStructure<>();

		Optional<Admin> recAdmin = userDao.verifyAdminByPhoneAndPassword(phone, password);

		if (recAdmin.isPresent()) {

			structure.setMessage("Admin Found and Verification Succesfull");
			structure.setStatusCode(HttpStatus.OK.value());
			structure.setData(recAdmin.get());

			return ResponseEntity.status(HttpStatus.OK).body(structure);
		}
		throw new AdminNotFoundException("Invalid Phone number or password");
	}

	public ResponseEntity<ResponseStructure<Admin>> verifyAdminByEmailAndPassword(String email, String password) {

		ResponseStructure<Admin> structure = new ResponseStructure<>();

		Optional<Admin> recAdmin = userDao.verifyAdminByEmailAndPassword(email, password);

		if (recAdmin.isPresent()) {

			structure.setMessage("Admin Found and Verification Succesfull");
			structure.setStatusCode(HttpStatus.OK.value());
			structure.setData(recAdmin.get());

			return ResponseEntity.status(HttpStatus.OK).body(structure);
		}
		throw new AdminNotFoundException("Invalid Email id or password");
	}
	
	public ResponseEntity<ResponseStructure<String>> deleteAdminById(int id) {
		
		ResponseStructure<String> structure = new ResponseStructure<>();

		Optional<User> recAdmin = userDao.findUserById(id);
		
		if( recAdmin.isPresent()) {
			
			userDao.deleteAdminById(id);
			
			structure.setMessage("Admin deleted succesfully");
			structure.setData("Admin Found");
			structure.setStatusCode(HttpStatus.OK.value());
			
			return ResponseEntity.status(HttpStatus.OK).body(structure);
		}
		throw new AdminNotFoundException("Cannot delete Admin as Id is Invalid");
		
	}
}
